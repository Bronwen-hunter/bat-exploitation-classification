#!/usr/bin/env python
# coding: utf-8

## Code used to obtain search results from the Bing web search API ##
## Last edited by Bronwen Hunter on 05/01/2021 ##

import requests
import pandas as pd
import json
import math
import time
from datetime import datetime
import argparse


class bing_wrapper():
    
    def __init__(self,
                 queryfile, # File where list of queries is stored
                 api_key,   # API key used to access Bing services
                 directory, # Directory where output files will be stored
                 numberofresults=300,
                 pagesize=100,
                 language='en'):
        
        df = pd.read_csv(queryfile)
        self.querylist = list(df['queries'])
        self.api_key = api_key
        self.directory = directory
        self.numberofresults = numberofresults
        self.pagesize = pagesize
        self.language = language
        
    
    def bing_search(self):
        
        ''' Function to retrieve all results'''
        
        search_url = "https://api.bing.microsoft.com/v7.0/search"
        resultsdict = {}
        for query in self.querylist:
            numberofpages = math.ceil(self.numberofresults/self.pagesize)
            urllist = []
            namelist = []
            for i in range(0,numberofpages):
                headers = {"Ocp-Apim-Subscription-Key":self.api_key}
                params = {"q":query, 
                          "textDecorations":False,
                          "textFormat":"HTML",
                          "count":self.pagesize, # Returns a maximum of 100 results per page
                          "offset":i*self.pagesize, # Allows for pagination
                          "safeSearch":"strict",
                          "setLang":self.language }
                response = requests.get(search_url, headers=headers, params=params)
                search_results = response.json()
                print("Retrieving page {}/{} for query:{}".format(i+1, numberofpages, query))
                results = search_results.get('webPages', {}).get('value', {})
                urllist = urllist + [results[j]['url'] for j in enumerate(results)]
                namelist = namelist + [results[j]['name'] for j in enumerate(results)]
                time.sleep(5)
                
            resultsdf = pd.DataFrame() # Creating a dataframe to stored the results 
            resultsdf['external_url']=urllist
            resultsdf['title'] = namelist
            resultsdf['query'] = [query for item in urllist]
            resultsdf['source'] = ['Bing' for item in urllist]
            resultsdict[query] = resultsdf
        allresultssdf = bing_wrapper.deduplicated_save(self, resultsdict)
        return allresultssdf
    
    
    def deduplicated_save(self, resultsdict):
        
        '''Function to deduplicate and save bing search results as a CSV file'''
        
        fullresults = pd.concat(resultsdict.values(), ignore_index=True)
        deduplicated = fullresults.drop_duplicates(subset = 'external_url')   # Deduplicating by result URL 
        deduplicated['id'] = [('B'+str(i)) for i in range(len(deduplicated))] # Adding an ID to each result
        now = datetime.now()
        dt_string = now.strftime("%d-%m-%Y")                                  # Adding the date the search was conducted to the filename
        deduplicated.to_csv(self.directory+"bingsearch_allqueries_{}.csv".format(dt_string))
        print("Documents are written to the {folder}".format(folder=self.directory))
        return deduplicated
        
        


def main():
    
    """The main function defines the interface with the users."""
    
    parser = argparse.ArgumentParser()
    parser.add_argument('--queryfile', default=None, required=True, type=str, help='Filepath where queries are stored')
    parser.add_argument('--api_key', default=None, required=True, type=str, help='API key for bing endpoint')
    parser.add_argument('--directory', default=None, required=True, type=str, help='Directory where output will be saved')
    parser.add_argument('--numberofresults', default=300, required=False, type=int, help='Number of results to return')
    parser.add_argument('--pagesize', default=100, required=False, type=int, help='Number of results returned per page')
    parser.add_argument('--lang', default = 'en', required=False, type=str, help='Language of the search results' )
    
    args = parser.parse_args()
    print(args)
    
    inst = bing_wrapper(args.queryfile,
                       args.api_key,
                       args.directory,
                       args.numberofresults,
                       args.pagesize,
                       args.lang)
    
    inst.bing_search()
    
    

if __name__ == "__main__":
    main()






