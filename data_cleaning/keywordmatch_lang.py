#!/usr/bin/env python
# coding: utf-8

import os
import pandas as pd
import fasttext
import re,string

def strip_all_entities(text):

    ''' Function to remove all punctuation and prefixed (for language identification)'''

    entity_prefixes = ['@','#']
    for separator in  string.punctuation:
        if separator not in entity_prefixes :
            text = text.replace(separator,' ')
    words = []
    for word in text.split():
        word = word.strip()
        if word:
            if word[0] not in entity_prefixes:
                words.append(word)
    return ' '.join(words)

class LanguageIdentification:

    ''' Class that uses pretrained language model to predict the language of texts'''

    def __init__(self, model_directory):
        pretrained_lang_model = model_directory
        self.model = fasttext.load_model(pretrained_lang_model)

    def predict_lang(self, text):
        predictions = self.model.predict(text, k=2) # returns top 2 matching languages
        return predictions


def keyword_match(keywords1, keywords2, df):

    ''' Function remove texts not containing predefined keywords'''

    droplist = []
    for i in list(df.index):
        if not any(keyword in str(df.loc[i, 'post_text']).lower() for keyword in keywords1):
            droplist.append(i)
        if not any(keyword in str(df.loc[i, 'post_text']).lower() for keyword in keywords2):
            droplist.append(i)
        print("searched for keywords in post {}".format(i))  
    df = df.drop(droplist, axis = 0).reset_index(drop=True)
    print("Removed {} rows without keywords ".format(len(droplist)))
    return df


def remove_non_english(df):

    ''' Function to remove non-enlish texts'''

    LANGUAGE = LanguageIdentification()
    droplist = []
    for i in range(len(df)):
        if len(str(df.loc[i, 'stripped_text']))>3:
            text = strip_all_entities(str(df.loc[i, 'stripped_text'])).lower()
            if len(text)>3:
                if '__label__en' not in LANGUAGE.predict_lang(text)[0]:
                    print(i, text)
                    droplist.append(i)
    df_en = df.drop(droplist, axis = 0).reset_index(drop=True)
    return df_en

